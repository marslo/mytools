#!/usr/bin/env bash

shopt -s extglob

# credit belongs to https://raw.githubusercontent.com/ppo/bash-colors/master/bash-colors.sh
# shellcheck disable=SC2015,SC2059
c() { [ $# == 0 ] && printf "\e[0m" || printf "$1" | sed 's/\(.\)/\1;/g;s/\([SDIUFNHT]\)/2\1/g;s/\([KRGYBMCW]\)/3\1/g;s/\([krgybmcw]\)/4\1/g;y/SDIUFNHTsdiufnhtKRGYBMCWkrgybmcw/12345789123457890123456701234567/;s/^\(.*\);$/\\e[\1m/g'; }
function die() { echo -e "$(c R)ERROR$(c) : $*" >&2; exit 2; }
function exitOnError() { if [ $? -ne 0 ]; then echo -e "$(c R)ERROR$(c) : $*" >&2; exit 1; fi; }
function showHelp() { echo -e "${usage}"; exit 0; }
function needsArg() { [[ -z "$OPTARG" ]] && die "no arg for --$OPT option"; }
function isRepo() { git rev-parse --git-dir >/dev/null 2>&1 || exitOnError 'not a git repo !'; }
function getRevision() { sha=$(git rev-parse -q --verify "$1^{commit}"); echo "${sha}"; }
function trim() { IFS='' read -r str; echo "${str}" | sed -e 's/^[[:blank:]]*//;s/[[:blank:]]*$//'; }

function getInfo() {
  [[ 1 -ne $# ]] && die "must provide the revision number or refspec name for function getInfo"
  local revision=$1
  local command="git show -s ${revision} --pretty=tformat:'%an | %ae | %ad | %cn | %ce | %cd'"
  echo -n "$(eval "${command}" || exitOnError 'failed to get revision information')"
}

function showParmas() {
  [[ 6 -ne $# ]] && die "wrong parameters in showParams function"
  local author=$1
  local authorEmail=$2
  local authorDate=$3
  local committer=$4
  local commitEmail=$5
  local commitDate=$6

  echo -e """
  .. details ..\n
         $(c M)author$(c) : '${author}'
    $(c M)authorEmail$(c) : '${authorEmail}'
     $(c M)authorDate$(c) : '${authorDate}'
      $(c M)committer$(c) : '${committer}'
    $(c M)commitEmail$(c) : '${commitEmail}'
     $(c M)commitDate$(c) : '${commitDate}'
         $(c M)params$(c) : $(c G)
                   git <rr|ca> -a '${author}' -e '${authorEmail}' -d '${authorDate}' -c '${committer}' -E '${commitEmail}' -D '${commitDate}'
                   git <rr|ca> --author=\"${author}\" --authorEmail=\"${authorEmail}\" --authorDate=\"${authorDate}\" --committer=\"${committer}\" --commitEmail=\"${commitEmail}\" --commitDate=\"${commitDate}\"$(c)
    $(c M)environment$(c) : $(c C)
                   export GIT_AUTHOR_NAME='${author}'
                   export GIT_AUTHOR_EMAIL='${authorEmail}'
                   export GIT_AUTHOR_DATE='${authorDate}'
                   export GIT_COMMITTER_NAME='${committer}'
                   export GIT_COMMITTER_EMAIL='${commitEmail}'
                   export GIT_COMMITTER_DATE='${commitDate}'$(c)

  .. or you can manual export again ..\n
  $(c G)  \$$(c) $(c C)export GIT_AUTHOR_NAME='${author}'; export GIT_AUTHOR_EMAIL='${authorEmail}'; export GIT_AUTHOR_DATE='${authorDate}'; export GIT_COMMITTER_NAME='${committer}'; export GIT_COMMITTER_EMAIL='${commitEmail}'; export GIT_COMMITTER_DATE='${commitDate}'$(c)
    or
  $(c G)  \$$(c) $(c C)source ${tmpfile}$(c)
  """
}

function doSet() {
  [[ -f "${tmpfile}" ]] && rm -f "${tmpfile}"
  # shellcheck disable=SC2086,SC2027
  local cmd="""bash "${dir}"/git-set -s -r "${revision}" -f "${tmpfile}" """
  eval "${cmd}" || exitOnError "failed to set environment variables for ${revision}"
}

function doCommitAll() {
  local command
  [[ -n "${GIT_AUTHOR_NAME}"     ]] && command="export GIT_AUTHOR_NAME='${GIT_AUTHOR_NAME}'; "
  [[ -n "${GIT_AUTHOR_EMAIL}"    ]] && command+="export GIT_AUTHOR_EMAIL='${GIT_AUTHOR_EMAIL}'; "
  [[ -n "${GIT_AUTHOR_DATE}"     ]] && command+="export GIT_AUTHOR_DATE='${GIT_AUTHOR_DATE}'; "
  [[ -n "${GIT_COMMITTER_NAME}"  ]] && command+="export GIT_COMMITTER_NAME='${GIT_COMMITTER_NAME}'; "
  [[ -n "${GIT_COMMITTER_EMAIL}" ]] && command+="export GIT_COMMITTER_EMAIL='${GIT_COMMITTER_EMAIL}'; "
  [[ -n "${GIT_COMMITTER_DATE}"  ]] && command+="export GIT_COMMITTER_DATE='${GIT_COMMITTER_DATE}'; "
  command+="git add --all && git commit --amend --no-edit --allow-empty --reset-author"
  if [[ 'true' = "${verbose}" ]]; then
    echo -e """
    .. commands ..\n
    $(c G)  \$$(c) $(c C)${command}$(c)
    """
  fi
  eval "${command}" || exitOnError 'failed to add all and commit via $ git ma'

  # shellcheck disable=SC2027
  command="unset GIT_AUTHOR_NAME; unset GIT_AUTHOR_EMAIL; unset GIT_AUTHOR_DATE; unset GIT_COMMITTER_NAME; unset GIT_COMMITTER_EMAIL; unset GIT_COMMITTER_DATE"
  eval "${command}" || exitOnError 'failed to unset environment variables'
}

help='false'
verbose='false'
sha=''
usage="""
\t $(c R)git-ma$(c) - $(c iR)m$(c)arslo $(c iR)a$(c)dd: to update HEAD without modify git revision author/authorEmail/authorDates/committer/commitEmail/commitDate
\nSYNOPSIS:
\n\t$(c sY)\$ git ma [ -v | --verbose | --debug ]
\t\t [ -h | --help ]
\t\t [ -r | --revision=<sha1> ]$(c)
\t\t\t\t  + the long parameters MUST use '$(c R)=$(c)' to identify opt and args
\nEXAMPLE:
\n\tshow help
\t\t$(c G)\$ git ma $(c)| $(c G)\$ git ma -h$(c) | $(c G)\$ git ma --help$(c)
\n\tget verbose
\t\t$(c G)\$ git ma -v$(c) | $(c G)\$ git ma --verbose$(c) | $(c G)\$ git ma --debug$(c)
\n\tto reset revision information only
\t\t$(c G)\$ git ma$(c) | $(c G)\$ git ma <revision>$(c) | $(c G)\$ git ma -r <revision>$(c) | $(c G)\$ git ma --revision=<revision>$(c)
"""

if [[ 0 -eq $# ]]; then
  sha='HEAD'
# simple usage: not starts with '-' && not contians '='
elif [[ 1 -eq $# ]] && [[ '-' != "${1::1}" ]] && [[ ! "$1" =~ '=' ]]; then
  sha="$1"
# for '-'/'--' params
else
  # credit belongs to https://stackoverflow.com/a/28466267/519360
  # shellcheck disable=SC2295
  while getopts :hvr:-: OPT; do
    if [ "$OPT" = "-" ]; then
      OPT="${OPTARG%%=*}"
      OPTARG="${OPTARG#$OPT}"
      OPTARG="${OPTARG#=}"
    fi
    case "$OPT" in
      h | help             ) help='true'                 ;;
      v | verbose | debug  ) verbose='true'              ;;
      r | revison          ) needsArg; sha="$OPTARG"     ;;
      ??*                  ) die "Illegal option --$OPT" ;;
      ?                    ) die "Illegal option --$OPT" ;;
    esac
  done
  [[ 1 -eq $OPTIND ]] && showHelp
  shift $((OPTIND-1))
fi

[[ 'true' = "${help}" ]] && showHelp

dir=$(dirname "$0")            # or $(dirname ${BASH_SOURCE[0]})
path="${PWD}"
timestamp="$(date '+%Y%m%d')"
tmp="$HOME/.marslo/.tmp"
tmpfile="${tmp}"/$(echo "${path}" | tr ' ' '_' | tr '/' '.')-"${timestamp}"

isRepo
revision=$(getRevision "${sha}")
[[ -z "${revision}" ]] && die "ref '${sha}' cannot be found in current repo."
shortRevision="${revision:0:10}"
values=$(getInfo "${revision}")

doSet
# shellcheck disable=SC1090
source "${tmpfile}"
doCommitAll

[[ 'true' = "${verbose}"    ]] && showParmas "${GIT_AUTHOR_NAME}" "${GIT_AUTHOR_EMAIL}" "${GIT_AUTHOR_DATE}" "${GIT_COMMITTER_NAME}" "${GIT_COMMITTER_EMAIL}" "${GIT_COMMITTER_DATE}"
if [[ 'true' = "${verbose}" ]] && [[ -n "${revision}" ]]; then
  echo -e """
    .. FINAL RESULT .. \n
    $(c Y)${shortRevision}$(c) : ${values}
    \t  $(c Y)HEAD$(c) : $(getInfo HEAD)
  """
fi

# vim: ft=sh ts=2 sts=2 sw=2 et
